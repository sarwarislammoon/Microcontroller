
project_templates.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000588  08000590  00010590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000588  08000588  00010588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800058c  0800058c  0001058c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  24000000  24000000  00010590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000000  08000590  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000020  08000590  00020020  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00010590  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000105be  2**0
                  CONTENTS, READONLY
 10 .debug_info   000012ed  00000000  00000000  00010601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000002bb  00000000  00000000  000118ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000088  00000000  00000000  00011bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000059  00000000  00000000  00011c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002814a  00000000  00000000  00011c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00000ff4  00000000  00000000  00039ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014b600  00000000  00000000  0003adcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00000120  00000000  00000000  001863d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000007c  00000000  00000000  001864f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000000 	.word	0x24000000
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08000570 	.word	0x08000570

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000004 	.word	0x24000004
 80002d4:	08000570 	.word	0x08000570

080002d8 <delay>:


//Global variables
uint32_t _ms_counter = 0U;

void delay(uint32_t ms){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 _ms_counter = 0;
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <delay+0x28>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 while(ms > _ms_counter){
 80002e6:	bf00      	nop
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <delay+0x28>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d8fa      	bhi.n	80002e8 <delay+0x10>
 }

}
 80002f2:	bf00      	nop
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	2400001c 	.word	0x2400001c

08000304 <SysTick_Init>:


void SysTick_Init(void){
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
	uint32_t DELAY_IN_MICRO_SECONDS = 1000U;
 800030a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030e:	607b      	str	r3, [r7, #4]
	uint32_t CLOCK_FREQUENCY_IN_MHZ = 64U;
 8000310:	2340      	movs	r3, #64	; 0x40
 8000312:	603b      	str	r3, [r7, #0]

	SysTick->CTRL = 0b00000111;     // Enable SysTick timer, SysTick interrupt and use CPU clock.
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <SysTick_Init+0x30>)
 8000316:	2207      	movs	r2, #7
 8000318:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = (DELAY_IN_MICRO_SECONDS * CLOCK_FREQUENCY_IN_MHZ) - 1;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	683a      	ldr	r2, [r7, #0]
 800031e:	fb02 f303 	mul.w	r3, r2, r3
 8000322:	4a04      	ldr	r2, [pc, #16]	; (8000334 <SysTick_Init+0x30>)
 8000324:	3b01      	subs	r3, #1
 8000326:	6053      	str	r3, [r2, #4]

}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	e000e010 	.word	0xe000e010

08000338 <SysTick_Handler>:



void SysTick_Handler(void) {
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
    _ms_counter++;
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <SysTick_Handler+0x18>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	3301      	adds	r3, #1
 8000342:	4a03      	ldr	r2, [pc, #12]	; (8000350 <SysTick_Handler+0x18>)
 8000344:	6013      	str	r3, [r2, #0]
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	2400001c 	.word	0x2400001c

08000354 <main>:



int main(void){
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	RCC->CR |=BIT0;   		//enable high speed internal clock
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <main+0x68>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a17      	ldr	r2, [pc, #92]	; (80003bc <main+0x68>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6013      	str	r3, [r2, #0]
	RCC->AHB4ENR |=BIT1; 	//Enable GPIOB clock
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <main+0x68>)
 8000366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036a:	4a14      	ldr	r2, [pc, #80]	; (80003bc <main+0x68>)
 800036c:	f043 0302 	orr.w	r3, r3, #2
 8000370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	//PB0 as output
	GPIOB->MODER &= ~BIT1;
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <main+0x6c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a11      	ldr	r2, [pc, #68]	; (80003c0 <main+0x6c>)
 800037a:	f023 0302 	bic.w	r3, r3, #2
 800037e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  BIT0;
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <main+0x6c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <main+0x6c>)
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	6013      	str	r3, [r2, #0]

    SysTick_Init();
 800038c:	f7ff ffba 	bl	8000304 <SysTick_Init>

	while(1){
		GPIOB->ODR |=  BIT0;  //Turn on GREEN LED
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <main+0x6c>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <main+0x6c>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6153      	str	r3, [r2, #20]
		delay(500);
 800039c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a0:	f7ff ff9a 	bl	80002d8 <delay>
		GPIOB->ODR &= ~BIT0;  //Turn Off GREEN LED
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <main+0x6c>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4a05      	ldr	r2, [pc, #20]	; (80003c0 <main+0x6c>)
 80003aa:	f023 0301 	bic.w	r3, r3, #1
 80003ae:	6153      	str	r3, [r2, #20]
		delay(500);
 80003b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003b4:	f7ff ff90 	bl	80002d8 <delay>
		GPIOB->ODR |=  BIT0;  //Turn on GREEN LED
 80003b8:	e7ea      	b.n	8000390 <main+0x3c>
 80003ba:	bf00      	nop
 80003bc:	58024400 	.word	0x58024400
 80003c0:	58020400 	.word	0x58020400

080003c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003c8:	4b37      	ldr	r3, [pc, #220]	; (80004a8 <SystemInit+0xe4>)
 80003ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ce:	4a36      	ldr	r2, [pc, #216]	; (80004a8 <SystemInit+0xe4>)
 80003d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003d8:	4b34      	ldr	r3, [pc, #208]	; (80004ac <SystemInit+0xe8>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f003 030f 	and.w	r3, r3, #15
 80003e0:	2b06      	cmp	r3, #6
 80003e2:	d807      	bhi.n	80003f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e4:	4b31      	ldr	r3, [pc, #196]	; (80004ac <SystemInit+0xe8>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f023 030f 	bic.w	r3, r3, #15
 80003ec:	4a2f      	ldr	r2, [pc, #188]	; (80004ac <SystemInit+0xe8>)
 80003ee:	f043 0307 	orr.w	r3, r3, #7
 80003f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003f4:	4b2e      	ldr	r3, [pc, #184]	; (80004b0 <SystemInit+0xec>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a2d      	ldr	r2, [pc, #180]	; (80004b0 <SystemInit+0xec>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000400:	4b2b      	ldr	r3, [pc, #172]	; (80004b0 <SystemInit+0xec>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000406:	4b2a      	ldr	r3, [pc, #168]	; (80004b0 <SystemInit+0xec>)
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	4929      	ldr	r1, [pc, #164]	; (80004b0 <SystemInit+0xec>)
 800040c:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <SystemInit+0xf0>)
 800040e:	4013      	ands	r3, r2
 8000410:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000412:	4b26      	ldr	r3, [pc, #152]	; (80004ac <SystemInit+0xe8>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f003 0308 	and.w	r3, r3, #8
 800041a:	2b00      	cmp	r3, #0
 800041c:	d007      	beq.n	800042e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800041e:	4b23      	ldr	r3, [pc, #140]	; (80004ac <SystemInit+0xe8>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f023 030f 	bic.w	r3, r3, #15
 8000426:	4a21      	ldr	r2, [pc, #132]	; (80004ac <SystemInit+0xe8>)
 8000428:	f043 0307 	orr.w	r3, r3, #7
 800042c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800042e:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <SystemInit+0xec>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000434:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <SystemInit+0xec>)
 8000436:	2200      	movs	r2, #0
 8000438:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800043a:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <SystemInit+0xec>)
 800043c:	2200      	movs	r2, #0
 800043e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <SystemInit+0xec>)
 8000442:	4a1d      	ldr	r2, [pc, #116]	; (80004b8 <SystemInit+0xf4>)
 8000444:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <SystemInit+0xec>)
 8000448:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <SystemInit+0xf8>)
 800044a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <SystemInit+0xec>)
 800044e:	4a1c      	ldr	r2, [pc, #112]	; (80004c0 <SystemInit+0xfc>)
 8000450:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <SystemInit+0xec>)
 8000454:	2200      	movs	r2, #0
 8000456:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <SystemInit+0xec>)
 800045a:	4a19      	ldr	r2, [pc, #100]	; (80004c0 <SystemInit+0xfc>)
 800045c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <SystemInit+0xec>)
 8000460:	2200      	movs	r2, #0
 8000462:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <SystemInit+0xec>)
 8000466:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <SystemInit+0xfc>)
 8000468:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <SystemInit+0xec>)
 800046c:	2200      	movs	r2, #0
 800046e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <SystemInit+0xec>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <SystemInit+0xec>)
 8000476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800047a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <SystemInit+0xec>)
 800047e:	2200      	movs	r2, #0
 8000480:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000482:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <SystemInit+0x100>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <SystemInit+0x104>)
 8000488:	4013      	ands	r3, r2
 800048a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800048e:	d202      	bcs.n	8000496 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000490:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <SystemInit+0x108>)
 8000492:	2201      	movs	r2, #1
 8000494:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <SystemInit+0x10c>)
 8000498:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800049c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	e000ed00 	.word	0xe000ed00
 80004ac:	52002000 	.word	0x52002000
 80004b0:	58024400 	.word	0x58024400
 80004b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80004b8:	02020200 	.word	0x02020200
 80004bc:	01ff0000 	.word	0x01ff0000
 80004c0:	01010280 	.word	0x01010280
 80004c4:	5c001000 	.word	0x5c001000
 80004c8:	ffff0000 	.word	0xffff0000
 80004cc:	51008108 	.word	0x51008108
 80004d0:	52004000 	.word	0x52004000

080004d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80004d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800050c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80004d8:	f7ff ff74 	bl	80003c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004dc:	480c      	ldr	r0, [pc, #48]	; (8000510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004de:	490d      	ldr	r1, [pc, #52]	; (8000514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e4:	e002      	b.n	80004ec <LoopCopyDataInit>

080004e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ea:	3304      	adds	r3, #4

080004ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f0:	d3f9      	bcc.n	80004e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f2:	4a0a      	ldr	r2, [pc, #40]	; (800051c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004f4:	4c0a      	ldr	r4, [pc, #40]	; (8000520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f8:	e001      	b.n	80004fe <LoopFillZerobss>

080004fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004fc:	3204      	adds	r2, #4

080004fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000500:	d3fb      	bcc.n	80004fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000502:	f000 f811 	bl	8000528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000506:	f7ff ff25 	bl	8000354 <main>
  bx  lr
 800050a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800050c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000510:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000514:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 8000518:	08000590 	.word	0x08000590
  ldr r2, =_sbss
 800051c:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 8000520:	24000020 	.word	0x24000020

08000524 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000524:	e7fe      	b.n	8000524 <ADC3_IRQHandler>
	...

08000528 <__libc_init_array>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	4d0d      	ldr	r5, [pc, #52]	; (8000560 <__libc_init_array+0x38>)
 800052c:	4c0d      	ldr	r4, [pc, #52]	; (8000564 <__libc_init_array+0x3c>)
 800052e:	1b64      	subs	r4, r4, r5
 8000530:	10a4      	asrs	r4, r4, #2
 8000532:	2600      	movs	r6, #0
 8000534:	42a6      	cmp	r6, r4
 8000536:	d109      	bne.n	800054c <__libc_init_array+0x24>
 8000538:	4d0b      	ldr	r5, [pc, #44]	; (8000568 <__libc_init_array+0x40>)
 800053a:	4c0c      	ldr	r4, [pc, #48]	; (800056c <__libc_init_array+0x44>)
 800053c:	f000 f818 	bl	8000570 <_init>
 8000540:	1b64      	subs	r4, r4, r5
 8000542:	10a4      	asrs	r4, r4, #2
 8000544:	2600      	movs	r6, #0
 8000546:	42a6      	cmp	r6, r4
 8000548:	d105      	bne.n	8000556 <__libc_init_array+0x2e>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000550:	4798      	blx	r3
 8000552:	3601      	adds	r6, #1
 8000554:	e7ee      	b.n	8000534 <__libc_init_array+0xc>
 8000556:	f855 3b04 	ldr.w	r3, [r5], #4
 800055a:	4798      	blx	r3
 800055c:	3601      	adds	r6, #1
 800055e:	e7f2      	b.n	8000546 <__libc_init_array+0x1e>
 8000560:	08000588 	.word	0x08000588
 8000564:	08000588 	.word	0x08000588
 8000568:	08000588 	.word	0x08000588
 800056c:	0800058c 	.word	0x0800058c

08000570 <_init>:
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000572:	bf00      	nop
 8000574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000576:	bc08      	pop	{r3}
 8000578:	469e      	mov	lr, r3
 800057a:	4770      	bx	lr

0800057c <_fini>:
 800057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057e:	bf00      	nop
 8000580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000582:	bc08      	pop	{r3}
 8000584:	469e      	mov	lr, r3
 8000586:	4770      	bx	lr
