
test_project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001dc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000474  0800047c  0001047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000474  08000474  00010474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000478  08000478  00010478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  24000000  24000000  0001047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000000  0800047c  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000020  0800047c  00020020  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0001047c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000104aa  2**0
                  CONTENTS, READONLY
 10 .debug_info   000005fe  00000000  00000000  000104ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000016f  00000000  00000000  00010aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000060  00000000  00000000  00010c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000003e  00000000  00000000  00010cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00027ed7  00000000  00000000  00010cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000005ca  00000000  00000000  00038bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e5918  00000000  00000000  0003919f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000000c8  00000000  00000000  0011eab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006f  00000000  00000000  0011eb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000000 	.word	0x24000000
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800045c 	.word	0x0800045c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000004 	.word	0x24000004
 80002d4:	0800045c 	.word	0x0800045c

080002d8 <delay>:


//Global variables
uint32_t _ms_counter = 0U;

void delay(uint32_t ms){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 _ms_counter = 0;
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <delay+0x28>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 while(ms > _ms_counter){
 80002e6:	bf00      	nop
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <delay+0x28>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d8fa      	bhi.n	80002e8 <delay+0x10>
 }

}
 80002f2:	bf00      	nop
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	2400001c 	.word	0x2400001c

08000304 <SysTick_Init>:


void SysTick_Init(void){
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
	uint32_t DELAY_IN_MICRO_SECONDS = 1000U;
 800030a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030e:	607b      	str	r3, [r7, #4]
	uint32_t CLOCK_FREQUENCY_IN_MHZ = 64U;
 8000310:	2340      	movs	r3, #64	; 0x40
 8000312:	603b      	str	r3, [r7, #0]

	SysTick->CTRL = 0b00000111;     // Enable SysTick timer, SysTick interrupt and use CPU clock.
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <SysTick_Init+0x30>)
 8000316:	2207      	movs	r2, #7
 8000318:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = (DELAY_IN_MICRO_SECONDS * CLOCK_FREQUENCY_IN_MHZ) - 1;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	683a      	ldr	r2, [r7, #0]
 800031e:	fb02 f303 	mul.w	r3, r2, r3
 8000322:	4a04      	ldr	r2, [pc, #16]	; (8000334 <SysTick_Init+0x30>)
 8000324:	3b01      	subs	r3, #1
 8000326:	6053      	str	r3, [r2, #4]

}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	e000e010 	.word	0xe000e010

08000338 <SysTick_Handler>:



void SysTick_Handler(void) {
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
    _ms_counter++;
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <SysTick_Handler+0x18>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	3301      	adds	r3, #1
 8000342:	4a03      	ldr	r2, [pc, #12]	; (8000350 <SysTick_Handler+0x18>)
 8000344:	6013      	str	r3, [r2, #0]
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	2400001c 	.word	0x2400001c

08000354 <main>:



int main(void){
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	RCC->CR |=BIT0;   		//enable high speed internal clock
 8000358:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <main+0x64>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a16      	ldr	r2, [pc, #88]	; (80003b8 <main+0x64>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6013      	str	r3, [r2, #0]
	RCC->AHB4ENR |=BIT1; 	//Enable GPIOB clock
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <main+0x64>)
 8000366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036a:	4a13      	ldr	r2, [pc, #76]	; (80003b8 <main+0x64>)
 800036c:	f043 0302 	orr.w	r3, r3, #2
 8000370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	//PB0 as output
	GPIOB->MODER &= ~BIT1;
 8000374:	4b11      	ldr	r3, [pc, #68]	; (80003bc <main+0x68>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a10      	ldr	r2, [pc, #64]	; (80003bc <main+0x68>)
 800037a:	f023 0302 	bic.w	r3, r3, #2
 800037e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  BIT0;
 8000380:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <main+0x68>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <main+0x68>)
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	6013      	str	r3, [r2, #0]

    SysTick_Init();
 800038c:	f7ff ffba 	bl	8000304 <SysTick_Init>

	while(1){
		GPIOB->ODR |=  BIT0;  //Turn on GREEN LED
 8000390:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <main+0x68>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a09      	ldr	r2, [pc, #36]	; (80003bc <main+0x68>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6153      	str	r3, [r2, #20]
		delay(100);
 800039c:	2064      	movs	r0, #100	; 0x64
 800039e:	f7ff ff9b 	bl	80002d8 <delay>
		GPIOB->ODR &= ~BIT0;  //Turn Off GREEN LED
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <main+0x68>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a05      	ldr	r2, [pc, #20]	; (80003bc <main+0x68>)
 80003a8:	f023 0301 	bic.w	r3, r3, #1
 80003ac:	6153      	str	r3, [r2, #20]
		delay(1000);
 80003ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b2:	f7ff ff91 	bl	80002d8 <delay>
		GPIOB->ODR |=  BIT0;  //Turn on GREEN LED
 80003b6:	e7eb      	b.n	8000390 <main+0x3c>
 80003b8:	58024400 	.word	0x58024400
 80003bc:	58020400 	.word	0x58020400

080003c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c8:	480c      	ldr	r0, [pc, #48]	; (80003fc <LoopForever+0x6>)
  ldr r1, =_edata
 80003ca:	490d      	ldr	r1, [pc, #52]	; (8000400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003cc:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <LoopForever+0xe>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d0:	e002      	b.n	80003d8 <LoopCopyDataInit>

080003d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d6:	3304      	adds	r3, #4

080003d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003dc:	d3f9      	bcc.n	80003d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003de:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e0:	4c0a      	ldr	r4, [pc, #40]	; (800040c <LoopForever+0x16>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e4:	e001      	b.n	80003ea <LoopFillZerobss>

080003e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e8:	3204      	adds	r2, #4

080003ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ec:	d3fb      	bcc.n	80003e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ee:	f000 f811 	bl	8000414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f2:	f7ff ffaf 	bl	8000354 <main>

080003f6 <LoopForever>:

LoopForever:
  b LoopForever
 80003f6:	e7fe      	b.n	80003f6 <LoopForever>
  ldr   r0, =_estack
 80003f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80003fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000400:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 8000404:	0800047c 	.word	0x0800047c
  ldr r2, =_sbss
 8000408:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 800040c:	24000020 	.word	0x24000020

08000410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC1_2_IRQHandler>
	...

08000414 <__libc_init_array>:
 8000414:	b570      	push	{r4, r5, r6, lr}
 8000416:	4d0d      	ldr	r5, [pc, #52]	; (800044c <__libc_init_array+0x38>)
 8000418:	4c0d      	ldr	r4, [pc, #52]	; (8000450 <__libc_init_array+0x3c>)
 800041a:	1b64      	subs	r4, r4, r5
 800041c:	10a4      	asrs	r4, r4, #2
 800041e:	2600      	movs	r6, #0
 8000420:	42a6      	cmp	r6, r4
 8000422:	d109      	bne.n	8000438 <__libc_init_array+0x24>
 8000424:	4d0b      	ldr	r5, [pc, #44]	; (8000454 <__libc_init_array+0x40>)
 8000426:	4c0c      	ldr	r4, [pc, #48]	; (8000458 <__libc_init_array+0x44>)
 8000428:	f000 f818 	bl	800045c <_init>
 800042c:	1b64      	subs	r4, r4, r5
 800042e:	10a4      	asrs	r4, r4, #2
 8000430:	2600      	movs	r6, #0
 8000432:	42a6      	cmp	r6, r4
 8000434:	d105      	bne.n	8000442 <__libc_init_array+0x2e>
 8000436:	bd70      	pop	{r4, r5, r6, pc}
 8000438:	f855 3b04 	ldr.w	r3, [r5], #4
 800043c:	4798      	blx	r3
 800043e:	3601      	adds	r6, #1
 8000440:	e7ee      	b.n	8000420 <__libc_init_array+0xc>
 8000442:	f855 3b04 	ldr.w	r3, [r5], #4
 8000446:	4798      	blx	r3
 8000448:	3601      	adds	r6, #1
 800044a:	e7f2      	b.n	8000432 <__libc_init_array+0x1e>
 800044c:	08000474 	.word	0x08000474
 8000450:	08000474 	.word	0x08000474
 8000454:	08000474 	.word	0x08000474
 8000458:	08000478 	.word	0x08000478

0800045c <_init>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr

08000468 <_fini>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	bf00      	nop
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr
