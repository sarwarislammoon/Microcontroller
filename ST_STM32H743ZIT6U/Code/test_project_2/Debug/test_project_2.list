
test_project_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000036c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000604  08000604  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000604  08000604  00010604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000608  08000608  00010608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  24000000  0800060c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000004  08000610  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000024  08000610  00020024  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020032  2**0
                  CONTENTS, READONLY
 10 .debug_info   00000795  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000002c2  00000000  00000000  0002080a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000000a8  00000000  00000000  00020ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000006c  00000000  00000000  00020b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00028103  00000000  00000000  00020be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000103c  00000000  00000000  00048ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e59f9  00000000  00000000  00049d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00000150  00000000  00000000  0012f71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000074  00000000  00000000  0012f86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000004 	.word	0x24000004
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080005ec 	.word	0x080005ec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000008 	.word	0x24000008
 80002d4:	080005ec 	.word	0x080005ec

080002d8 <bsp_init>:
#include "Q_BSP.h"

void bsp_init(void){
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  //Enable GPIOB, GPIOC and GPIOE clock
	RCC->CR |=BIT0;   				//enable high speed internal clock
 80002dc:	4b21      	ldr	r3, [pc, #132]	; (8000364 <bsp_init+0x8c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a20      	ldr	r2, [pc, #128]	; (8000364 <bsp_init+0x8c>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6013      	str	r3, [r2, #0]
	RCC->AHB4ENR |=BIT1 | BIT2 | BIT4; 	//Enable GPIOB, GPIOC and GPIOE clock
 80002e8:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <bsp_init+0x8c>)
 80002ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002ee:	4a1d      	ldr	r2, [pc, #116]	; (8000364 <bsp_init+0x8c>)
 80002f0:	f043 0316 	orr.w	r3, r3, #22
 80002f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   *As the Red yellow and Green are connected to PB14, PE1 and PB0 respectvely
   *so set these GPIo direction as Output
  */

	//PB14 as output
	GPIOB->MODER &= ~BIT29;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <bsp_init+0x90>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a1a      	ldr	r2, [pc, #104]	; (8000368 <bsp_init+0x90>)
 80002fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000302:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  BIT28;
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <bsp_init+0x90>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a17      	ldr	r2, [pc, #92]	; (8000368 <bsp_init+0x90>)
 800030a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800030e:	6013      	str	r3, [r2, #0]

	//PE1 as output
	GPIOE->MODER &= ~BIT3;
 8000310:	4b16      	ldr	r3, [pc, #88]	; (800036c <bsp_init+0x94>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a15      	ldr	r2, [pc, #84]	; (800036c <bsp_init+0x94>)
 8000316:	f023 0308 	bic.w	r3, r3, #8
 800031a:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |=  BIT2;
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <bsp_init+0x94>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a12      	ldr	r2, [pc, #72]	; (800036c <bsp_init+0x94>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6013      	str	r3, [r2, #0]

	//PB0 as output
	GPIOB->MODER &= ~BIT1;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <bsp_init+0x90>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <bsp_init+0x90>)
 800032e:	f023 0302 	bic.w	r3, r3, #2
 8000332:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  BIT0;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <bsp_init+0x90>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a0b      	ldr	r2, [pc, #44]	; (8000368 <bsp_init+0x90>)
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	6013      	str	r3, [r2, #0]

    //PC13 as input for user Button
	GPIOC->MODER &= ~BIT27;
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <bsp_init+0x98>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <bsp_init+0x98>)
 8000346:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800034a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~BIT26;
 800034c:	4b08      	ldr	r3, [pc, #32]	; (8000370 <bsp_init+0x98>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a07      	ldr	r2, [pc, #28]	; (8000370 <bsp_init+0x98>)
 8000352:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000356:	6013      	str	r3, [r2, #0]


}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	58024400 	.word	0x58024400
 8000368:	58020400 	.word	0x58020400
 800036c:	58021000 	.word	0x58021000
 8000370:	58020800 	.word	0x58020800

08000374 <led>:


void led(uint8_t colour, uint8_t state){
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	460a      	mov	r2, r1
 800037e:	71fb      	strb	r3, [r7, #7]
 8000380:	4613      	mov	r3, r2
 8000382:	71bb      	strb	r3, [r7, #6]
    switch (colour){
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	2b03      	cmp	r3, #3
 8000388:	d042      	beq.n	8000410 <led+0x9c>
 800038a:	2b03      	cmp	r3, #3
 800038c:	dc63      	bgt.n	8000456 <led+0xe2>
 800038e:	2b01      	cmp	r3, #1
 8000390:	d002      	beq.n	8000398 <led+0x24>
 8000392:	2b02      	cmp	r3, #2
 8000394:	d01e      	beq.n	80003d4 <led+0x60>
        break;


    }

}
 8000396:	e05e      	b.n	8000456 <led+0xe2>
        if (state == ON){
 8000398:	79bb      	ldrb	r3, [r7, #6]
 800039a:	2b01      	cmp	r3, #1
 800039c:	d106      	bne.n	80003ac <led+0x38>
         GPIOB->ODR |= (BIT14); //Turn on Red Led ,PB14
 800039e:	4b31      	ldr	r3, [pc, #196]	; (8000464 <led+0xf0>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a30      	ldr	r2, [pc, #192]	; (8000464 <led+0xf0>)
 80003a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003a8:	6153      	str	r3, [r2, #20]
        break;
 80003aa:	e04f      	b.n	800044c <led+0xd8>
        else if (state == OFF){
 80003ac:	79bb      	ldrb	r3, [r7, #6]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d106      	bne.n	80003c0 <led+0x4c>
         GPIOB->ODR &= ~(BIT14); //Turn off Red Led
 80003b2:	4b2c      	ldr	r3, [pc, #176]	; (8000464 <led+0xf0>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a2b      	ldr	r2, [pc, #172]	; (8000464 <led+0xf0>)
 80003b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003bc:	6153      	str	r3, [r2, #20]
        break;
 80003be:	e045      	b.n	800044c <led+0xd8>
        else if(state == TOGGLE)
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b02      	cmp	r3, #2
 80003c4:	d142      	bne.n	800044c <led+0xd8>
         GPIOB->ODR ^= (BIT14); //Toggle Red Led
 80003c6:	4b27      	ldr	r3, [pc, #156]	; (8000464 <led+0xf0>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a26      	ldr	r2, [pc, #152]	; (8000464 <led+0xf0>)
 80003cc:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80003d0:	6153      	str	r3, [r2, #20]
        break;
 80003d2:	e03b      	b.n	800044c <led+0xd8>
        if (state == ON){
 80003d4:	79bb      	ldrb	r3, [r7, #6]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d106      	bne.n	80003e8 <led+0x74>
         GPIOE->ODR |= (BIT1); //Turn on Yellow Led ,  PE1
 80003da:	4b23      	ldr	r3, [pc, #140]	; (8000468 <led+0xf4>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a22      	ldr	r2, [pc, #136]	; (8000468 <led+0xf4>)
 80003e0:	f043 0302 	orr.w	r3, r3, #2
 80003e4:	6153      	str	r3, [r2, #20]
        break;
 80003e6:	e033      	b.n	8000450 <led+0xdc>
        else if (state == OFF){
 80003e8:	79bb      	ldrb	r3, [r7, #6]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d106      	bne.n	80003fc <led+0x88>
         GPIOE->ODR &= ~(BIT1); //Turn off Yellow Led
 80003ee:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <led+0xf4>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a1d      	ldr	r2, [pc, #116]	; (8000468 <led+0xf4>)
 80003f4:	f023 0302 	bic.w	r3, r3, #2
 80003f8:	6153      	str	r3, [r2, #20]
        break;
 80003fa:	e029      	b.n	8000450 <led+0xdc>
        else if(state == TOGGLE)
 80003fc:	79bb      	ldrb	r3, [r7, #6]
 80003fe:	2b02      	cmp	r3, #2
 8000400:	d126      	bne.n	8000450 <led+0xdc>
         GPIOE->ODR ^= (BIT1); //Toggle Yellow Led
 8000402:	4b19      	ldr	r3, [pc, #100]	; (8000468 <led+0xf4>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a18      	ldr	r2, [pc, #96]	; (8000468 <led+0xf4>)
 8000408:	f083 0302 	eor.w	r3, r3, #2
 800040c:	6153      	str	r3, [r2, #20]
        break;
 800040e:	e01f      	b.n	8000450 <led+0xdc>
        if (state == ON){
 8000410:	79bb      	ldrb	r3, [r7, #6]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d106      	bne.n	8000424 <led+0xb0>
         GPIOB->ODR |= (BIT0); //Turn on Green Led , PB0
 8000416:	4b13      	ldr	r3, [pc, #76]	; (8000464 <led+0xf0>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a12      	ldr	r2, [pc, #72]	; (8000464 <led+0xf0>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6153      	str	r3, [r2, #20]
        break;
 8000422:	e017      	b.n	8000454 <led+0xe0>
        else if (state == OFF){
 8000424:	79bb      	ldrb	r3, [r7, #6]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d106      	bne.n	8000438 <led+0xc4>
         GPIOB->ODR &= ~(BIT0); //Turn off Green Led
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <led+0xf0>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <led+0xf0>)
 8000430:	f023 0301 	bic.w	r3, r3, #1
 8000434:	6153      	str	r3, [r2, #20]
        break;
 8000436:	e00d      	b.n	8000454 <led+0xe0>
        else if(state == TOGGLE)
 8000438:	79bb      	ldrb	r3, [r7, #6]
 800043a:	2b02      	cmp	r3, #2
 800043c:	d10a      	bne.n	8000454 <led+0xe0>
         GPIOB->ODR ^= (BIT0); //Toggle Green Led
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <led+0xf0>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a08      	ldr	r2, [pc, #32]	; (8000464 <led+0xf0>)
 8000444:	f083 0301 	eor.w	r3, r3, #1
 8000448:	6153      	str	r3, [r2, #20]
        break;
 800044a:	e003      	b.n	8000454 <led+0xe0>
        break;
 800044c:	bf00      	nop
 800044e:	e002      	b.n	8000456 <led+0xe2>
        break;
 8000450:	bf00      	nop
 8000452:	e000      	b.n	8000456 <led+0xe2>
        break;
 8000454:	bf00      	nop
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	58020400 	.word	0x58020400
 8000468:	58021000 	.word	0x58021000

0800046c <get_button_status>:


uint8_t get_button_status(uint8_t button){
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]

	if ((GPIOC->IDR &= BIT13) != 0){
 8000476:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <get_button_status+0x40>)
 8000478:	691b      	ldr	r3, [r3, #16]
 800047a:	4a0c      	ldr	r2, [pc, #48]	; (80004ac <get_button_status+0x40>)
 800047c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000480:	6113      	str	r3, [r2, #16]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d00a      	beq.n	800049c <get_button_status+0x30>
		while((GPIOC->IDR &= BIT13)){
 8000486:	bf00      	nop
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <get_button_status+0x40>)
 800048a:	691b      	ldr	r3, [r3, #16]
 800048c:	4a07      	ldr	r2, [pc, #28]	; (80004ac <get_button_status+0x40>)
 800048e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000492:	6113      	str	r3, [r2, #16]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1f7      	bne.n	8000488 <get_button_status+0x1c>

		} // wait until the button is released

		return HIGH;
 8000498:	2301      	movs	r3, #1
 800049a:	e000      	b.n	800049e <get_button_status+0x32>
	}
	else {
		return LOW;
 800049c:	2300      	movs	r3, #0
	}
}
 800049e:	4618      	mov	r0, r3
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	58020800 	.word	0x58020800

080004b0 <SysTick_Init>:
 }

}


void SysTick_Init(void){
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
    SysTick->CTRL = 0b00000111;     // Enable SysTick timer, SysTick interrupt and use CPU clock.
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <SysTick_Init+0x1c>)
 80004b6:	2207      	movs	r2, #7
 80004b8:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = (DELAY_IN_MICRO_SECONDS * CLOCK_FREQUENCY_IN_MHZ) - 1;
 80004ba:	4b04      	ldr	r3, [pc, #16]	; (80004cc <SysTick_Init+0x1c>)
 80004bc:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80004c0:	605a      	str	r2, [r3, #4]

}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	e000e010 	.word	0xe000e010

080004d0 <SysTick_Handler>:



void SysTick_Handler(void) {
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
    _ms_counter++;
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <SysTick_Handler+0x18>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	4a03      	ldr	r2, [pc, #12]	; (80004e8 <SysTick_Handler+0x18>)
 80004dc:	6013      	str	r3, [r2, #0]
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	24000020 	.word	0x24000020

080004ec <main>:
#include "Q_common.h"
#include "Q_BSP.h"

uint32_t last_led=GREEN_LED;

int main(void){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	bsp_init();
 80004f0:	f7ff fef2 	bl	80002d8 <bsp_init>

    SysTick_Init();
 80004f4:	f7ff ffdc 	bl	80004b0 <SysTick_Init>

	while(1){
		if(get_button_status(0) == HIGH ){
 80004f8:	2000      	movs	r0, #0
 80004fa:	f7ff ffb7 	bl	800046c <get_button_status>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b01      	cmp	r3, #1
 8000502:	d1f9      	bne.n	80004f8 <main+0xc>
			if(last_led ==GREEN_LED){
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <main+0x60>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b03      	cmp	r3, #3
 800050a:	d107      	bne.n	800051c <main+0x30>
				led(RED_LED, TOGGLE);
 800050c:	2102      	movs	r1, #2
 800050e:	2001      	movs	r0, #1
 8000510:	f7ff ff30 	bl	8000374 <led>
				last_led=RED_LED;
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <main+0x60>)
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	e7ed      	b.n	80004f8 <main+0xc>
			}

			else if(last_led ==RED_LED){
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <main+0x60>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d107      	bne.n	8000534 <main+0x48>
				led(YELLOW_LED, TOGGLE);
 8000524:	2102      	movs	r1, #2
 8000526:	2002      	movs	r0, #2
 8000528:	f7ff ff24 	bl	8000374 <led>
				last_led=YELLOW_LED;
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <main+0x60>)
 800052e:	2202      	movs	r2, #2
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	e7e1      	b.n	80004f8 <main+0xc>
			}

			else if(last_led==YELLOW_LED){
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <main+0x60>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d1dd      	bne.n	80004f8 <main+0xc>
				led(GREEN_LED, TOGGLE);
 800053c:	2102      	movs	r1, #2
 800053e:	2003      	movs	r0, #3
 8000540:	f7ff ff18 	bl	8000374 <led>
				last_led=GREEN_LED;
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <main+0x60>)
 8000546:	2203      	movs	r2, #3
 8000548:	601a      	str	r2, [r3, #0]
		if(get_button_status(0) == HIGH ){
 800054a:	e7d5      	b.n	80004f8 <main+0xc>
 800054c:	24000000 	.word	0x24000000

08000550 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000552:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000554:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000558:	480c      	ldr	r0, [pc, #48]	; (800058c <LoopForever+0x6>)
  ldr r1, =_edata
 800055a:	490d      	ldr	r1, [pc, #52]	; (8000590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <LoopForever+0xe>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000560:	e002      	b.n	8000568 <LoopCopyDataInit>

08000562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000566:	3304      	adds	r3, #4

08000568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800056c:	d3f9      	bcc.n	8000562 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000570:	4c0a      	ldr	r4, [pc, #40]	; (800059c <LoopForever+0x16>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000574:	e001      	b.n	800057a <LoopFillZerobss>

08000576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000578:	3204      	adds	r2, #4

0800057a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800057c:	d3fb      	bcc.n	8000576 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800057e:	f000 f811 	bl	80005a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000582:	f7ff ffb3 	bl	80004ec <main>

08000586 <LoopForever>:

LoopForever:
  b LoopForever
 8000586:	e7fe      	b.n	8000586 <LoopForever>
  ldr   r0, =_estack
 8000588:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800058c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000590:	24000004 	.word	0x24000004
  ldr r2, =_sidata
 8000594:	0800060c 	.word	0x0800060c
  ldr r2, =_sbss
 8000598:	24000004 	.word	0x24000004
  ldr r4, =_ebss
 800059c:	24000024 	.word	0x24000024

080005a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC1_2_IRQHandler>
	...

080005a4 <__libc_init_array>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	4d0d      	ldr	r5, [pc, #52]	; (80005dc <__libc_init_array+0x38>)
 80005a8:	4c0d      	ldr	r4, [pc, #52]	; (80005e0 <__libc_init_array+0x3c>)
 80005aa:	1b64      	subs	r4, r4, r5
 80005ac:	10a4      	asrs	r4, r4, #2
 80005ae:	2600      	movs	r6, #0
 80005b0:	42a6      	cmp	r6, r4
 80005b2:	d109      	bne.n	80005c8 <__libc_init_array+0x24>
 80005b4:	4d0b      	ldr	r5, [pc, #44]	; (80005e4 <__libc_init_array+0x40>)
 80005b6:	4c0c      	ldr	r4, [pc, #48]	; (80005e8 <__libc_init_array+0x44>)
 80005b8:	f000 f818 	bl	80005ec <_init>
 80005bc:	1b64      	subs	r4, r4, r5
 80005be:	10a4      	asrs	r4, r4, #2
 80005c0:	2600      	movs	r6, #0
 80005c2:	42a6      	cmp	r6, r4
 80005c4:	d105      	bne.n	80005d2 <__libc_init_array+0x2e>
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005cc:	4798      	blx	r3
 80005ce:	3601      	adds	r6, #1
 80005d0:	e7ee      	b.n	80005b0 <__libc_init_array+0xc>
 80005d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d6:	4798      	blx	r3
 80005d8:	3601      	adds	r6, #1
 80005da:	e7f2      	b.n	80005c2 <__libc_init_array+0x1e>
 80005dc:	08000604 	.word	0x08000604
 80005e0:	08000604 	.word	0x08000604
 80005e4:	08000604 	.word	0x08000604
 80005e8:	08000608 	.word	0x08000608

080005ec <_init>:
 80005ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ee:	bf00      	nop
 80005f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f2:	bc08      	pop	{r3}
 80005f4:	469e      	mov	lr, r3
 80005f6:	4770      	bx	lr

080005f8 <_fini>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	bf00      	nop
 80005fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fe:	bc08      	pop	{r3}
 8000600:	469e      	mov	lr, r3
 8000602:	4770      	bx	lr
